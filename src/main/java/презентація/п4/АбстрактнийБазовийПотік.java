package презентація.п4;

import функції.БінарнийОператор;
import функції.Споживач;
import функції.Умова;
import функції.Функція;

/**
 * Базовий клас, який відповідає за побудову ланцюжків потоку
 */
public abstract class АбстрактнийБазовийПотік<T> implements Потік<T> {
    @Override
    public Потік<T> фільтр(final Умова<T> умова) {
        return new ФільтрованийПотік<>(this, умова);
    }

    @Override
    public <R> Потік<R> мап(final Функція<T, R> конвертер) {
        return new КонвертованийПотік<>(this, конвертер);
    }

    @Override
    public T редюс(final T початковеЗначення, final БінарнийОператор<T> акумулятор) {
        // TODO: треба реалізувати
        return null;
    }

    @Override
    public void дляКожного(Споживач<T> дія) {
        // TODO: було б непогано привести всі операції, які закінчують потік, до одного виду
        while (hasNext()) {
            дія.прийняти(next());
        }
    }































































    /**
     * Закінчує потік, виконуючи дану термінальну операцію
     *
     * @param термінальнийОператор термінальна операція, яка виконує потік і підраховує результат його виконання
     * @param <R> тип результуючого значення
     * @return результат виконання потоку
     */
    private <R> R закінчитиПотік(ТермінальнийОператор<R> термінальнийОператор) {
        return термінальнийОператор.закінчити();
    }
}
