package презентація.п5;

import функції.БінарнийОператор;
import функції.Споживач;
import функції.Умова;
import функції.Функція;

import java.util.Iterator;

/**
 * Визначає потік елементів з можливістю послідовного виконання базових операцій над ними
 */
public interface Потік<T> extends Iterator<T> {
    /**
     * Повертає новий потік елементів, які відповідають заданій умові
     *
     * @param умова умова, яка визначає чи потрібно включати елемент до результуючого потоку
     * @return новий потік
     */
    Потік<T> фільтр(Умова<T> умова);

    /**
     * Повертає новий потік елементів, який складається з результатів виконання над кожним елементом
     * поточного потоку заданої функції
     *
     * @param конвертер функція, яку треба виконати над кожним елементом потоку
     * @param <R> тип результуючого потоку
     * @return новий потік
     */
    <R> Потік<R> мап(Функція<T, R> конвертер);

    /**
     * Виконує дану дію над кожним елементом потоку
     *
     * @param дія дія, яку треба виконати над кожним елеменотм потоку
     */
    void дляКожного(Споживач<T> дія);

    /**
     * Виконує скорочення потоку, базуючись на початковому значенню і заданій асоціативній акумулюючій функції
     *
     * @param початковеЗначення початкове значення для акумулюючої фукнції
     * @param акумулятор акумулююча функція
     * @return результат скорочення потоку
     */
    T редюс(T початковеЗначення, БінарнийОператор<T> акумулятор);

    /**
     * Виконує скорочення потоку, використовуючи {@link Колектор}
     *
     * @param колектор колектор
     * @param <R> тип результату скорочення потоку
     * @param <A> тип проміжного контейнера, використовується в {@link Колектор}
     * @return результат скорочення потоку
     */
    <R, A> R зібрати(Колектор<T, A, R> колектор);
}
